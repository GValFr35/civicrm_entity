<?php

/**
 * @file
 * Provide CiviCRM entity reference field storage infrastructure using CiviCRM API
 */

/**
 * Implements hook_field_storage_info().
 *
 * @return array
 */
function civicrm_entity_reference_field_storage_field_storage_info() {
  return array(
    'civicrm_entity_reference_field_storage' => array(
      'label' => t('CiviCRM Entity Reference Field Storage'),
      'description' => t('Uses CiviRM API to mimic Drupal Field API storage for CiviCRM Entity Reference Fields'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_storage_details().
 *
 * @param $field
 */
function civicrm_entity_reference_field_storage_field_storage_details($field) {
  // We probably want to implement that at one point, but this is informative only.

}



/**
 * Implements hook_field_storage_load().
 *
 * @param $entity_type
 * @param $entities
 * @param $age
 * @param $fields
 * @param $options
 */
function civicrm_entity_reference_field_storage_field_storage_load($entity_type, $entities, $age, $fields, $options) {
  $load_current = $age == FIELD_LOAD_CURRENT;

  foreach ($fields as $field_id => $ids) {
    $field = field_info_field_by_id($field_id);
    $field_name = $field['field_name'];
    civicrm_initialize();
    foreach($ids as $id) {
      $field_values = array();
      try {
        $result = civicrm_api3($field['settings']['target_entity_type'], 'get', array(
          $field['settings']['target_id_column'] => $entities[$id]->{$field['settings']['host_source_id']},
        ));
      }
      catch (CiviCRM_API3_Exception $e) {
        $error = $e->getMessage();
        drupal_set_message($error, 'error');
        continue;
      }

      if ($result['count']) {
        $delta = 0;
        foreach ($result['values'] as $target_id => $data) {
          $field_values[LANGUAGE_NONE][$delta]['target_id'] = $target_id;
          $delta += 1;
        }
        $entities[$id]->{$field_name} = $field_values;
      }
    }
  }


}

/**
 * Implements hook_field_storage_query().
 *
 * @param $query
 * @return array
 */
function civicrm_entity_reference_field_storage_field_storage_query($query){
  foreach($query->fieldConditions as $delta => $data){
    if($data['field']['type'] == 'civicrm_entity_reference'){

      // this doesn't work
      /*
      $target_table = 'civicrm_' . $data['field']['settings']['target_entity_type'];
      $sub_query = db_select($query->entityConditions['entity_type']['value'], 'h');
      $sub_query->fields('h', array($data['field']['settings']['host_source_id']));
      $sub_query->join($target_table, 't', 'h.'.$data['field']['settings']['host_source_id'].' = t.'.$data['field']['settings']['target_id_column']);
      //$sub_query->fields('t', array($data['field']['settings']['target_id_column']));
      $sub_query->condition('t.'.$data['field']['settings']['target_id_column'], $data['value'], '=');
      $records = $sub_query->execute();
      while($record = $records->fetchAssoc()){
       // dsm($record);
      }

      //return $query->finishQuery($sub_query);
      */
    }
  }


}